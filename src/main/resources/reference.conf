marathon {
  request-timeout: 10 seconds
  request-timeout: ${?MARATHON_REQUEST_TIMEOUT}

  available-features: []
  local-port-min: 10000
  local-port-min: ${?MARATHON_LOCAL_PORT_MIN}
  local-port-max: 20000
  local-port-max: ${?MARATON_LOCAL_PORT_MAX}

  mesos-role: null
  default-accepted-resource-roles: ["*"]
  mesos-authentication-principal: null

  // Prefix to use for environment variables injected automatically into all started tasks.
  env-vars-prefix: null



  core {
    election {
      // Also allowed: 'none' - no other fields are necessary with none and HA is disabled
      backend: curator
      backend: ${?MARATHON_CORE_ELECTION_BACKEND}
      url: ${marathon.zookeeper.url}/leader-curator
      url: ${?MARATHON_CORE_ELECTION_URL}
      session-timeout: ${marathon.zookeeper.session-timeout}
      session-timeout: ${MARATHON_CORE_ELECTION_SESSION_TIMEOUT}
      connection-timeout: ${marathon.zookeeper.connection-timeout}
      connection-timeout: ${MARATHON_CORE_ELECTION_CONNECTION_TIMEOUT}
    }
    event {
      // The event stream buffers events that are not already consumed by clients.
      // This number defines the number of events that get buffered on the server side before the events are
      // dropped
      max-outstanding-messages: 50
      max-outstanding-messages: ${?MARATHON_CORE_EVENT_MAX_OUTSTANDING_MESSAGES}
    }
    group {
      request-timeout: ${marathon.request-timeout}
      max-queued-updates: 500
      available-features: ${marathon.available-features}
      local-port-min: ${marathon.local-port-min}
      local-port-max: ${marathon.local-port-max}
    }
    launcher {
      // Stop trying to match additional tasks for this offer after this time.
      offer-matching-timeout = 1 second
      offer-matching-timeout = ${?MARATHON_CORE_LAUNCHER_OFFER_MATCHING_TIMEOUT}
      // Timeout after matching an offer for saving all matched tasks that we are about to launch.
      // When reaching the timeout, only the tasks that we could save within the timeout are also launched.
      // All other task launches are temporarily rejected and retried later.
      save-tasks-to-launch-timeout: 3 s
      save-tasks-to-launch-timeout: ${?MARATHON_CORE_LAUNCHER_SAVE_TASKS_TO_LAUNCH_TIMEOUT}
      // The duration for which to decline offers by default
      decline-offer-duration: 2 minutes
      decline-offer-duration: ${?MARATHON_CORE_LAUNCHER_DECLINE_OFFER_DURATION}
      // Time, in milliseconds, to wait for a new reservation to be acknowledged
      // via a received offer before deleting it
      task-reservation-timeout: 20 seconds
      task-reservation-timeout: ${?MARATHON_CORE_LAUNCHER_TASK_RESERVATION_TIMEOUT}

      // Executor to use when none is specified. If not defined the Mesos command executor is used by default.
      default-executor: "//cmd"
      default-executor: ${MARATHON_CORE_LAUNCHER_DEFAULT_EXECUTOR}

      default-accepted-resource-roles: ${marathon.default-accepted-resource-roles}
      // Prefix to use for environment variables injected automatically into all started tasks.
      env-vars-prefix: ${marathon.env-vars-prefix}
      mesos-role: ${marathon.mesos-role}
      mesos-authentication-principal: ${marathon.mesos-authentication-principal}
    }
    launch-queue {
      // INTERNAL TUNING PARAMETER: Timeout for requests to the launch queue actor.
      request-timeout: 1 second
      // NTERNAL TUNING PARAMETER: Timeout (in ms) for matched task opereations to be accepted or rejected.
      task-operation-notification-timeout: 10 s
    }
  }

  zookeeper {
    url: "zk://127.0.0.1:2181/marathon"
    url: ${?MARATHON_ZOOKEEPER_URL}
    session-timeout: 10 seconds
    connection-timeout: 10 seconds
  }
}